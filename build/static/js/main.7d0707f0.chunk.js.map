{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","upvoteGif","index","BN","downvoteGif","onInputChange","event","value","target","connection","Connection","Provider","useEffect","addEventListener","account","fetch","createGifAccount","startStuffOff","systemProgram","programId","signers","className","onClick","type","placeholder","onChange","map","item","src","gifLink","userAddress","upvotes","downvotes","upvoters","some","it","downvoters","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d0707f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json';\nimport kp from './keypair.json';\nimport BN from 'bn.js';\n\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom Wallet found!');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connect with Public key:', response.publicKey.toString());\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        const response = await solana.connect();\n        console.log('Connected with Public key:', response.publicKey.toString());\n\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('Gif successfuly sent to program!', inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log('Error sending GIF:', error);\n    }\n  };\n\n  const upvoteGif = async (index) => {\n    console.log('Upvote: ', index);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.upvoteGif(new BN(index.toString()), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('Gif upvoted', index);\n\n      await getGifList();\n    } catch (error) {\n      console.log('Error upvoting GIF:', error);\n    }\n  };\n  const downvoteGif = async (index) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.downvoteGif(new BN(index.toString()), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('Gif downvoted', index);\n\n      await getGifList();\n    } catch (error) {\n      console.log('Error downvoting GIF:', error);\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button className='cta-button connect-wallet-button' onClick={connectWallet}>\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className='connected-container'>\n          <input\n            type='text'\n            placeholder='Enter gif link!'\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className='cta-button submit-gif-button' onClick={sendGif}>\n            Submit\n          </button>\n          <div className='gif-grid'>\n            {gifList.map((item, index) => (\n              <div className='gif-item' key={index}>\n                <img src={item.gifLink} />\n                <div className='gif-item-info'>\n                  <div>Submitted by: {item.userAddress.toString()}</div>\n                  <div>Upvotes: {item.upvotes.toString()}</div>\n                  <div>Downvotes: {item.downvotes.toString()}</div>\n                </div>\n\n                <div className='button-group'>\n                  <button\n                    className={`cta-button upvote-gif-button ${\n                      item.upvoters.some((it) => it.toString() === walletAddress) &&\n                      'upvote-gif-button-active'\n                    }`}\n                    onClick={() => upvoteGif(index)}\n                  >\n                    Upvote\n                  </button>\n                  <button\n                    className={`cta-button downvote-gif-button ${\n                      item.downvoters.some((it) => it.toString() === walletAddress) &&\n                      'downvote-gif-button-active'\n                    }`}\n                    onClick={() => downvoteGif(index)}\n                  >\n                    Downvote\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('load', async (event) => await checkIfWalletIsConnected());\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log('Got the account', account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log('Error in getGifs: ', error);\n      setGifList(null);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n\n      // Call Solana program here.\n\n      // Set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className='App'>\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className='header-container'>\n          <p className='header'>🖼 Inter-dimensional Meme Portal</p>\n          <p className='sub-text'>View your GIF collection in the multiverse ✨</p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}